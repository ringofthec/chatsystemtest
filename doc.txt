
一. 开发过程记录

    1. 连接服务器，断开连接，实现Connect和ConnectMgr管理器
        主要实现文件：app.js
                  connect.js / connectmgr.js

    2. 添加登陆功能，玩家输入用户名，相当于账号，处理账号的登陆登出功能
        主要实现文件：login.js / connect.js

    3. 添加房间功能，实现ChatRoom和ChatRoomMgr管理器
        主要实现文件：chatroom.js / chatroommgt.js / room.js
        
    3.1 重构协议的注册，分发功能
        
    4. 添加聊天功能
        主要实现文件：chat.js
        
    5. 添加敏感词过滤功能
        主要实现文件：filterword.js
        
    6. 实现热词统计，聊天历史功能
        主要实现文件：chatroom.js

    7. 添加命令功能
        主要实现文件：command.js
    
    
二. 项目目录结构
    chat 主目录
        - app.js 服务器主入口，启动服务器监听对应端口
        - lib 主要代码实现
            - handler 所有协议处理部分
                - login.js 登陆协议处理
                - room.js 房间协议处理
                - chat.js 聊天协议处理
                - command.js 命令协议处理
            - module 服务器逻辑对象部分
                - connect.js 玩家连接的封装，每一个玩家都有一个对应的con对象
                - connectmgr.js 玩家连接对象管理器，负责管理全部玩家连接
                - chatroom.js 聊天室对象，每一个聊天室都有一个对应的chatroom对象
                - chatroommgr.js 聊天室管理器，服务器支持多个独立存在的聊天室，聊天室管理器管理全部聊天室的创建，维护等
            - util 工具部分
                - filterword.js 基于DFA的敏感词过滤功能
                - util.js 常用函数，序列化/反序列化函数
                
三. 程序动态说明
    1. 游戏启动后，使用ws库，创建一个websocket服务器，并监听对应端口，等待客户端连接。
    2. 每个客户端成功连接服务器后，需要发送 login （参数 username）协议到服务器，服务器生成一个Connect对象，管理这个连接，并且给这个连接绑定全部协议处理器。
    3. 玩家客户端发送room.join（参数room_id）协议加入对应房间。如果尚不存在room_id对应的聊天室，那么创建对应的ChatRoom对象，并且把玩家加入到聊天室中，并且向房间里的其他玩家广播该玩家加入的消息。
    4. 玩家这个时候可以调用chat.toroom/chat.toplayer在房间里聊天，或者调用command命令（目前支持popular 和 stats）查询服务器相关信息。
    5. 玩家可以发送room.leave或者断线等会自动触发该事件，玩家会从聊天室中删除，并且向房间里的其他玩家广播该玩家离开的消息。
    
四. 程序可拓展部分
    1. 本次demo制作，在架构方面重构比较多，可以方便的添加新的协议，支持除聊天以外的功能。
    2. Connect中对连接的状态进行了封装，协议是否接受由状态机控制，相对的提高了程序的安全性。
    3. 目前未考虑的部分，是聊天内容的数据库存储。目前是存储在内存中，服务器停机即消失。
    4. 性能扩展性，在高并发的预期下，应该考虑加入消息队列，比如redis订阅发布，或者是kafka，这样在面对消息高峰可以起到削峰和负载均衡。
    5. 目前使用的通信方式是json，直观简单易懂，如果考虑带宽问题，可以使用protbuf等更紧凑的格式。
    6. 本来想要引入log4js，因为时间缘故没有引入，log4js在日志的输出和维护上更加工业化。
    7. 单元测试，因为不怎么熟悉，所以没有实现。
    8. 现在更流行的服务器架构，前端会有connector或者gate或者link这样的专门管理和客户端连接的服务器，后面的功能服务器会隐藏在这些连接服务器背后提供服务，这些也是项目规模变大后必须考虑的。
    
五. 程序运行说明
    1. chatserver目录下，然后就可以用node app.js或者 start_server 脚本启动服务器（注：第一次运行前，先执行install脚本）
    2. chatclient目录下，执行node index.js 或者 start_client 即可开始聊天，（注：第一次运行前，先执行install脚本）
    3. 聊天前会先询问登陆的username，以及要登陆的房间id，只有同一房间id的用户，才会看到彼此的聊天信息
    4. 开始聊天后，可以用/help 查看支持的命令